module electronicDetectorDevice (LEDR, SW);   
 
 // U=SW[9], P=SW[8], C=SW[7], M=SW[0]
 output logic  [9:0]    LEDR;   
 input  logic  [9:0]    SW;    
 
 logic discount, stolen; 
      
 // Logic to determine if LED for discount and LED for stolen should be on
 
 // assign discount = P | (U & C);
 assign discount = SW[8] | (SW[9] & SW[7]);

 // assign stolen = (U & ~P & ~M) | (~U & ~C & ~M)
 assign stolen = (SW[9] & ~SW[8] & ~SW[0]) | (~SW[9] & ~SW[7] & ~SW[0]);
 
 // have LED's turn on if conditions are met
 assign LEDR[0] = discount;
 assign LEDR[1] = stolen;
 
endmodule  
 
module electronicDetectorDevice_testbench();  
 logic  [9:0] LEDR;    
 logic  [9:0] SW;   
  
 electronicDetectorDevice dut (.LEDR, .SW);  
  
 // Try all combinations of inputs.  
 integer i;   
 initial begin   
  SW[9] = 1'b0;   
  SW[8] = 1'b0;   
  SW[7] = 1'b0;
  SW[0] = 1'b0;
  for(i = 0; i <256; i++) begin  
   SW[7:0] = i; #10;  
  end  
 end  
endmodule  